Коммандная строка документацию можно прочитать, введя --help

Документация состоит из разделов

исполняемые программы

функции

библиотечные функции

специальные файлы

форматы файлов

игры

разное (макросы и соглашения)

комманды администрирования

процедуры ядра

Редатирование файлов less - постраничный просмотр и поиск

file, stst - информация о файле

readlink - получить полное имя файла

tail, head - просмотр конца и начала файла. Монитор логов

vi/vim, emacs, nano, mcedit - редактирование текста

split - разбить файл на несколько частей

Файлы touch - создаёт файл, если он не существует

cp - копирование

mv - перемещение/переименование файла

ln - создаёт ссылки на файлы

alias - создаёт алиас для команды

Удаление файлов cd - переход в указанную директорию: . - текущая; .. - дир одним уровнем иерархии выше

cd - - переходв предыдущую использованную директорию

ls - отображает содержимое директории

pwd - отображает текущую директорию

readlink - полный путь к файлу

Права файлов -rwx

обыйный файл, d директория, l ссылки, s сокеты, r чтение, w запись, x исполнение
Кто и икогда w - показывает, кто залогинен и чем занят

whe - показывает, кто залогинен

wall - отправляет сообщение на все терминалы

useradd - утилита создания пользователя

userdel - утилита удаление пользователя

usermod - у изменения аккаунтов

date - просмотр, установленной даты

cal, ncal - простой календарь

Потоки ввода/вывода STDIN(0) - стандартный ввод

STDOUT(1) - стандартный вывод

STDERR(2) - стандартный поток ошибок

< - перенаправление ввода с клавы в файл

перенаправление выводас файл в командную строку
“l” symlink символическая ссылка. С помощью символических ссылок администратор может присвоить одному файлу или директории несколько идентичностей. Символическая ссылка является указателем на оригинальный файл. Существует два типа символических ссылок: - жесткие ссылки; - мягкие ссылки.
Различие между твердыми и мягкими ссылками в том, что мягкие ссылки ссылаются на имя файла, в то время как жесткие ссылки прямо ссылаются на оригинальный файл. Кроме того, жесткие ссылки не работают с файлами, расположенными на других разделах или файловых системах. 
Создание: echo "some text" > file1 ln -s file1 file2 cat file2 (soft просмотр того, что файл 2 ссылается на файл 1). Просмотр того, что ссылка создана ls -ld file2.
Запись: Можно записывать в 1й файл, текст добавтся и во 2й (echo "more text" >>file2)
Чтение: cat file2
Удаление: unlink file1. Просмотр того, что ссылка удалилась ls -ld file1
“s” unix sockets файл локального сокета. Сокеты локального домена используются для обмена данными между процессами. В основном они используются такими службами, как X windows, syslog и т.д. 
Создание: mkfifo socket.sock (можно не использовать)
Запись: nc -lU socket.sock (сервер)
Чтение: nc -U socket.sock (клиент)
Удаление: системной функции unlink или командой rm socket.sock
“p” pipe именованный канал Как и локальные сокеты, именованные каналы позволяют осуществлять обмен данными между локальными процессами.
Создание: mkfifo pkanal и просмотр ls -ld pkanal
Запись: echo "запись" > pkanal
Чтение: во втором окне cat pkanal
Удаление: rm pkanal
“b” block device файл блочного устройства (sudo su)
Создание: sudo mknod blockd b 5 100
Запись: echo tekst > blockd
bash: blockd: Отказано в доступе
bs=100M(чисто мегабайт) count=5(количество итераций)
Чтение:  
Удаление: rm block	d
“c” chat device файл символьного устройства 
Создание: Надо зайти от администратора mknod charv c 5 100
bs=100M(чисто мегабайт) count=5(количество итераций)

Удаление: sudo rm charv
А символьные файлы устройств используются для небуферизованного обмена данными. Большинство устройств способно принимать и отправлять данные либо блоками (блочные устройства), либо сплошным потоком байтов (символьные устройства), но некоторые (такие как жёсткий диск) сочетают в себе обе эти возможности. Работа с первым типом устройств возможна либо через блочные, либо через символьные файлы, а вот с последним типом — подходят и те, и другие. 
